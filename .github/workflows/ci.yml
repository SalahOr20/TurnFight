name: CI auto merge dev ‚Üí main

on:
  push:
    branches:
      - dev

jobs:
  test-and-merge:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # n√©cessaire pour pouvoir reset et push

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Make mvnw executable
        run: chmod +x mvnw

      - name: Build & test with Maven
        id: maven-test
        run: ./mvnw clean verify
        continue-on-error: true  # On continue m√™me si √ßa plante

      - name: Merge or handle failure
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}

          if [ "${{ steps.maven-test.outcome }}" = "success" ]; then
            echo "‚úÖ Tests passed, merging dev into main..."
            git fetch origin
            git checkout main || git checkout -b main
            if ! git merge origin/dev --no-ff --allow-unrelated-histories -m "Auto-merge from dev"; then
              echo "‚ùå Merge conflict detected. Manual intervention required on branch 'main'."
              exit 1
            fi
            git push origin main
          else
            echo "‚ùå Tests failed, creating failure branch and resetting dev..."

            git fetch origin
            git checkout dev

            # V√©rifier si le dernier commit touche un workflow
            if git diff --name-only HEAD~1 HEAD | grep -q "^.github/workflows/"; then
              echo "üö´ Le dernier commit modifie un fichier workflow (.github/workflows/*). Rollback interdit par GitHub Actions."
              echo "Aucune action automatique sur dev ni cr√©ation de branche failure."
              exit 1
            fi

            # Cr√©ation d'une branche failure-<shortsha> pour garder une trace
            FAILURE_BRANCH="failure-$(git rev-parse --short HEAD)"
            git branch -f "$FAILURE_BRANCH"
            git push origin "$FAILURE_BRANCH" --force

            # Reculer dev d'un commit
            git reset --hard HEAD~1
            git push origin dev --force

            echo "Failure branch '$FAILURE_BRANCH' created and dev branch reset."
            exit 1  # marque le job comme failed
          fi
